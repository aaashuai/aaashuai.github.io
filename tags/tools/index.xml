<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tools on AAAShuai</title>
    <link>https://blog.aaashuai.com/tags/tools/</link>
    <description>Recent content in tools on AAAShuai</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 01 Jul 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://blog.aaashuai.com/tags/tools/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Tmux 和 Kitty</title>
      <link>https://blog.aaashuai.com/post/06_tmux/</link>
      <pubDate>Mon, 01 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.aaashuai.com/post/06_tmux/</guid>
      <description>背景 平时喜欢在终端（zsh）里使用 tmux 来跑一些命令（因为习惯性的关闭终端，所以有一些命令跑完想回过头来看看结果，就无从下手了），但是每次打开终端后都要手动执行下 tat tmp (alias tat = &amp;quot;tmux attach -t&amp;quot;) 很麻烦，所以找了找有没有办法能够在启动终端的时候默认执行，有则 tmux attach，无则 tmux new -s tmp，减少重复性操作。&#xA;探索 在 ~/.config/kitty/kitty.conf 配置中，可以通过修改默认 shell 执行命令，来改变终端进入时执行的默认指令：&#xA;如果你有几个 tmux session 并且想在打开终端时选择要进入的 session 那就可以结合 fzf 来实现：&#xA;shell /bin/zsh -l -c &amp;#34;tmux ls -F &amp;#39;#{session_name}&amp;#39; | fzf --reverse --height ${FZF_TMUX_HEIGHT:-40%} --bind=enter:replace-query+print-query | read session &amp;amp;&amp;amp; tmux attach -t ${session:-tmp} || tmux new -s ${session:-tmp}&amp;#34; 但是经过一段时间的使用，发现还是直接进入tmp的情况比较多，所以就简化为：&#xA;shell /bin/zsh -l -c &amp;#34;tmux attach -t ${session:-tmp} || tmux new -s ${session:-tmp}&amp;#34; 大功告成！！</description>
    </item>
    <item>
      <title>Zsh Shell</title>
      <link>https://blog.aaashuai.com/post/04_zsh/</link>
      <pubDate>Fri, 29 Oct 2021 10:57:47 +0800</pubDate>
      <guid>https://blog.aaashuai.com/post/04_zsh/</guid>
      <description>1. 给zsh添加自定义补全 在.zshrc添加补全激活&#xA;$ vim ~/.zshrc ... autoload -U compinit compinit ... 查看fpath, 选择一个写脚本的地方&#xA;$ print -rl -- $fpath /Users/xxx/.oh-my-zsh/plugins/vi-mode /Users/xxx/.oh-my-zsh/plugins/zsh-syntax-highlighting /Users/xxx/.oh-my-zsh/plugins/zsh-autosuggestions /Users/xxx/.oh-my-zsh/plugins/git /Users/xxx/.oh-my-zsh/plugins/z /Users/xxx/.oh-my-zsh/functions /Users/xxx/.oh-my-zsh/completions /Users/xxx/.oh-my-zsh/plugins/vi-mode /Users/xxx/.oh-my-zsh/plugins/zsh-syntax-highlighting /Users/xxx/.oh-my-zsh/plugins/zsh-autosuggestions /Users/xxx/.oh-my-zsh/plugins/git /Users/xxx/.oh-my-zsh/plugins/z /Users/xxx/.oh-my-zsh/functions /Users/xxx/.oh-my-zsh/completions /usr/local/share/zsh/site-functions /usr/share/zsh/site-functions /usr/share/zsh/5.8/functions 如果没有想要放置的目录，就把自定义的目录（此处是~/newdir）添加到fpath&#xA;# zsh $ vim ~/.zshrc ... fpath=(~/newdir $fpath) ... # zsh $ print -rl -- $fpath ... /usr/share/zsh/site-functions /usr/share/zsh/5.8/functions /Users/xxx/newdir 在你自定义的目录下添加补全方法&#xA;定义方法&#xA;# zsh $ vim /Users/xxx/newdir/_yourFunc #compdef _yourFunc yourAimFunc1 yourAimFunc2 ... # 这行不能少, 自动加载补全到你的命令, 且&amp;#39;#&amp;#39;必须紧挨compdef, 否则无法注册函数 function _yourFunc { compadd api mqtt interval kafka ftp celery # 给命令添加候选项 # 详见 https://github.</description>
    </item>
    <item>
      <title>ideavim 插件速查</title>
      <link>https://blog.aaashuai.com/post/03_ideavim/</link>
      <pubDate>Thu, 19 Aug 2021 12:07:04 +0800</pubDate>
      <guid>https://blog.aaashuai.com/post/03_ideavim/</guid>
      <description>NERDTree&#xA;o Open files, directories and bookmarks g:NERDTreeMapActivateNode go Open selected file, but leave cursor in the NERDTree g:NERDTreeMapPreview t Open selected node/bookmark in a new tab g:NERDTreeMapOpenInTab T Same as &amp;rsquo;t&amp;rsquo; but keep the focus on the current tab g:NERDTreeMapOpenInTabSilent i Open selected file in a split window g:NERDTreeMapOpenSplit gi Same as i, but leave the cursor on the NERDTree g:NERDTreeMapPreviewSplit s Open selected file in a new vsplit g:NERDTreeMapOpenVSplit gs Same as s, but leave the cursor on the NERDTree g:NERDTreeMapPreviewVSplit O Recursively open the selected directory g:NERDTreeMapOpenRecursively x Close the current nodes parent g:NERDTreeMapCloseDir X Recursively close all children of the current node g:NERDTreeMapCloseChildren P Jump to the root node g:NERDTreeMapJumpRoot p Jump to current nodes parent g:NERDTreeMapJumpParent K Jump up inside directories at the current tree depth g:NERDTreeMapJumpFirstChild J Jump down inside directories at the current tree depth g:NERDTreeMapJumpLastChild &amp;lt;C-J&amp;gt; Jump down to next sibling of the current directory g:NERDTreeMapJumpNextSibling &amp;lt;C-K&amp;gt; Jump up to previous sibling of the current directory g:NERDTreeMapJumpPrevSibling r Recursively refresh the current directory g:NERDTreeMapRefresh R Recursively refresh the current root g:NERDTreeMapRefreshRoot m Display the NERDTree menu g:NERDTreeMapMenu q Close the NERDTree window g:NERDTreeMapQuit A Zoom (maximize/minimize) the NERDTree window g:NERDTreeMapToggleZoom surround</description>
    </item>
    <item>
      <title>Fish Shell</title>
      <link>https://blog.aaashuai.com/post/02_fish/</link>
      <pubDate>Sun, 20 Jun 2021 00:00:00 +0000</pubDate>
      <guid>https://blog.aaashuai.com/post/02_fish/</guid>
      <description>0. 结论 放弃了, fish 另起一套的命令导致在远程服务器上无法直接套用&#xA;1. 为啥用fish 感受一下 friendly interactive shell 有多friendly (其实是zsh用太久了, 想尝鲜, hhh&#xA;2. 安装步骤 安装fish&#xA;brew install fish 修改为默认shell （参见官方文档&#xA;Add the shell to /etc/shells with: echo /usr/local/bin/fish | sudo tee -a /etc/shells Change your default shell with: chsh -s /usr/local/bin/fish 重新打开shell 安装fisher&#xA;curl -sL https://git.io/fisher | source &amp;amp;&amp;amp; fisher install jorgebucaran/fisher 安装z-jump&#xA;fisher install jethrokuan/z 安装 oh-my-fish a. [墙&amp;hellip; ]&#xA;curl -L https://get.oh-my.fish | fish b. [wroked]</description>
    </item>
  </channel>
</rss>
