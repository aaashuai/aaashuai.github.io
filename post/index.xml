<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on AAAShuai</title>
    <link>https://blog.aaashuai.com/post/</link>
    <description>Recent content in Posts on AAAShuai</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 01 Jul 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://blog.aaashuai.com/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Tmux 和 Kitty</title>
      <link>https://blog.aaashuai.com/post/06_tmux/</link>
      <pubDate>Mon, 01 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.aaashuai.com/post/06_tmux/</guid>
      <description>背景 平时喜欢在终端里使用 tmux 来跑一些命令（因为习惯性的关闭终端，所以有一些命令跑完想回过头来看看结果，就无从下手了），但是每次打开终端后都要手动执行下 tat tmp (alias tat = &amp;quot;tmux attach -t&amp;quot;) 很麻烦，所以找了找有没有办法能够在启动终端的时候默认执行，有则 tmux attach，无则 tmux new -s tmp，减少重复性操作。&#xA;结论 在 ~/.config/kitty/kitty.conf 中加一行，可以修改默认 shell 执行命令：&#xA;shell /bin/zsh -l -c &amp;#34;tmux attach -t ${session:-tmp} || tmux new -s ${session:-tmp}&amp;#34; 大功告成！！</description>
    </item>
    <item>
      <title>MacOS 隔离运行 Atrust</title>
      <link>https://blog.aaashuai.com/post/05_vpn/</link>
      <pubDate>Sat, 26 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://blog.aaashuai.com/post/05_vpn/</guid>
      <description>背景 最近公司的安全策略又调整了，把其他非 atrust 的代理都关了， 所有服务都要挂 atrust 才能连，更可气的是还没把关掉的那些 vpn 整合到一个 atrust 里， 一部分需要挂 A，另一部分需要挂 B，而且日常工作里这两个还都得用到， 并且 atrust 还不支持多开，就导致一会儿需要切这个， 一会儿需要切那个，这无形中增加了不少额外的“工作”量。&#xA;当然，趁这个切换的时间喝喝茶水，舒缓舒缓也是极好的🤣&#xA;纠结 不过作为一个不喜欢在一个连续工作时间内被各种事情打断的人来说， 这是极痛苦且低效的。所以想来想去还是得想个办法来解决下这个问题。&#xA;尝试 我的开发机是 mac，atrust 只能在 mac 和 windows 上安装， linux 试了能装但是不能用😂，所以我初步的想法是开个虚拟机装个阉割版的 windows 装 vpn ， 再通过路由表把需要代理访问的一些ip走虚拟网卡进行转发。 但是经过亿些尝试，最终以失败告终，流量能代理到虚拟机，但是死活不过 vpn。&#xA;又是理论实践失败的一天，放弃。&#xA;参考过 https://blog.csdn.net/baofeidyz/article/details/129851257, 有兴趣的可以试试.&#xA;顿悟 后来有一天突然一想，这不就是变相的科学上网么，都是把访问流量转发能连接特定网站的机器上。&#xA;说干就干，先找个能在 windows 上装的代理服务，这里我选的是 v2ray， 装好之后经过简单的验证，果然可以！不过接下来又遇到一个问题，就是客户端这里， 我用的是 qv2ray，有多个 vpn 需要同时连，但是又不能多开， 如果需要用到哪个了还是通过手动选择的话，那不又回到最初的起点了么。 于是又进行了亿波查找，功夫不负有心人，qv2ray 有个功能叫复杂配置， 刚好可以解决这个问题。通过域名或 ip 匹配，控制流量走到不同的出口，到此，大功告成。👏&#xA;PS：理论上任何 vpn 都能通过这种方式来隔离，保持宿主机的纯净。&#xA;至于我为什么不把两个 atrust 分别装在宿主机和虚拟机中，也是这个原因。</description>
    </item>
    <item>
      <title>Zsh Shell</title>
      <link>https://blog.aaashuai.com/post/04_zsh/</link>
      <pubDate>Fri, 29 Oct 2021 10:57:47 +0800</pubDate>
      <guid>https://blog.aaashuai.com/post/04_zsh/</guid>
      <description>1. 给zsh添加自定义补全 在.zshrc添加补全激活&#xA;$ vim ~/.zshrc ... autoload -U compinit compinit ... 查看fpath, 选择一个写脚本的地方&#xA;$ print -rl -- $fpath /Users/xxx/.oh-my-zsh/plugins/vi-mode /Users/xxx/.oh-my-zsh/plugins/zsh-syntax-highlighting /Users/xxx/.oh-my-zsh/plugins/zsh-autosuggestions /Users/xxx/.oh-my-zsh/plugins/git /Users/xxx/.oh-my-zsh/plugins/z /Users/xxx/.oh-my-zsh/functions /Users/xxx/.oh-my-zsh/completions /Users/xxx/.oh-my-zsh/plugins/vi-mode /Users/xxx/.oh-my-zsh/plugins/zsh-syntax-highlighting /Users/xxx/.oh-my-zsh/plugins/zsh-autosuggestions /Users/xxx/.oh-my-zsh/plugins/git /Users/xxx/.oh-my-zsh/plugins/z /Users/xxx/.oh-my-zsh/functions /Users/xxx/.oh-my-zsh/completions /usr/local/share/zsh/site-functions /usr/share/zsh/site-functions /usr/share/zsh/5.8/functions 如果没有想要放置的目录，就把自定义的目录（此处是~/newdir）添加到fpath&#xA;# zsh $ vim ~/.zshrc ... fpath=(~/newdir $fpath) ... # zsh $ print -rl -- $fpath ... /usr/share/zsh/site-functions /usr/share/zsh/5.8/functions /Users/xxx/newdir 在你自定义的目录下添加补全方法&#xA;定义方法&#xA;# zsh $ vim /Users/xxx/newdir/_yourFunc #compdef _yourFunc yourAimFunc1 yourAimFunc2 ... # 这行不能少, 自动加载补全到你的命令, 且&amp;#39;#&amp;#39;必须紧挨compdef, 否则无法注册函数 function _yourFunc { compadd api mqtt interval kafka ftp celery # 给命令添加候选项 # 详见 https://github.</description>
    </item>
    <item>
      <title>ideavim 插件速查</title>
      <link>https://blog.aaashuai.com/post/03_ideavim/</link>
      <pubDate>Thu, 19 Aug 2021 12:07:04 +0800</pubDate>
      <guid>https://blog.aaashuai.com/post/03_ideavim/</guid>
      <description>NERDTree&#xA;o Open files, directories and bookmarks g:NERDTreeMapActivateNode go Open selected file, but leave cursor in the NERDTree g:NERDTreeMapPreview t Open selected node/bookmark in a new tab g:NERDTreeMapOpenInTab T Same as &amp;rsquo;t&amp;rsquo; but keep the focus on the current tab g:NERDTreeMapOpenInTabSilent i Open selected file in a split window g:NERDTreeMapOpenSplit gi Same as i, but leave the cursor on the NERDTree g:NERDTreeMapPreviewSplit s Open selected file in a new vsplit g:NERDTreeMapOpenVSplit gs Same as s, but leave the cursor on the NERDTree g:NERDTreeMapPreviewVSplit O Recursively open the selected directory g:NERDTreeMapOpenRecursively x Close the current nodes parent g:NERDTreeMapCloseDir X Recursively close all children of the current node g:NERDTreeMapCloseChildren P Jump to the root node g:NERDTreeMapJumpRoot p Jump to current nodes parent g:NERDTreeMapJumpParent K Jump up inside directories at the current tree depth g:NERDTreeMapJumpFirstChild J Jump down inside directories at the current tree depth g:NERDTreeMapJumpLastChild &amp;lt;C-J&amp;gt; Jump down to next sibling of the current directory g:NERDTreeMapJumpNextSibling &amp;lt;C-K&amp;gt; Jump up to previous sibling of the current directory g:NERDTreeMapJumpPrevSibling r Recursively refresh the current directory g:NERDTreeMapRefresh R Recursively refresh the current root g:NERDTreeMapRefreshRoot m Display the NERDTree menu g:NERDTreeMapMenu q Close the NERDTree window g:NERDTreeMapQuit A Zoom (maximize/minimize) the NERDTree window g:NERDTreeMapToggleZoom surround</description>
    </item>
    <item>
      <title>Fish Shell</title>
      <link>https://blog.aaashuai.com/post/02_fish/</link>
      <pubDate>Sun, 20 Jun 2021 00:00:00 +0000</pubDate>
      <guid>https://blog.aaashuai.com/post/02_fish/</guid>
      <description>0. 结论 放弃了, fish 另起一套的命令导致在远程服务器上无法直接套用&#xA;1. 为啥用fish 感受一下 friendly interactive shell 有多friendly (其实是zsh用太久了, 想尝鲜, hhh&#xA;2. 安装步骤 安装fish&#xA;brew install fish 修改为默认shell （参见官方文档&#xA;Add the shell to /etc/shells with: echo /usr/local/bin/fish | sudo tee -a /etc/shells Change your default shell with: chsh -s /usr/local/bin/fish 重新打开shell 安装fisher&#xA;curl -sL https://git.io/fisher | source &amp;amp;&amp;amp; fisher install jorgebucaran/fisher 安装z-jump&#xA;fisher install jethrokuan/z 安装 oh-my-fish a. [墙&amp;hellip; ]&#xA;curl -L https://get.oh-my.fish | fish b. [wroked]</description>
    </item>
    <item>
      <title>Hello World</title>
      <link>https://blog.aaashuai.com/post/01_helloworld/</link>
      <pubDate>Sat, 17 Apr 2021 09:11:54 +0800</pubDate>
      <guid>https://blog.aaashuai.com/post/01_helloworld/</guid>
      <description> print(&amp;#34;hello world...&amp;#34;) </description>
    </item>
  </channel>
</rss>
